// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    field Array str;
    field int length;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
      let str = Array.new(maxLength + 1);
      let length = 0;
      return this;
    }

    /** Disposes this string. */
    method void dispose() {
      do Memory.deAlloc(this);
      return;
    }

    /** Returns the current length of this string. */
    method int length() {
      return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
      return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
      let str[j] = c;
      return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
      let str[length] = c;
      let length = length + 1;
      return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
      let str[length] = 0;
      let length = length -1;
      return;
    }

    /** Returns the integer value of this string,
     *  until a non-digit character is detected. */
    method int intValue() {
      var int val, cont, d;
      var boolean neg;
      let val = 0;
      if(str[0] = 45){
        let cont = 1;
        let neg = true;
      }
      else{
        let cont = 0;
        let neg = false;
      }

      while(cont < length){
        let d = str[cont] - 48;
        let val = (val *10)  + d;
        let cont = cont + 1;
      }

      if(neg){
        return -val;
      }
      else{
        return val;
      }
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
      var int tempVar;
      let length = 0;
      let tempVar = Math.abs(val);
      if(val < 0){
        do appendChar(45);
      }

      do String.int2String(tempVar, this);
      return;
    }

    function String int2String(int val, String str) {
      var int mod, c;

      let mod = (val - ((val/10) * 10));
      let c = 48 + mod;

      if(val < 10){
        return str.appendChar(c);
      }
      else{
        do String.int2String(val/10, str);
        do str.appendChar(c);
      }

      return str;
    }

    /** Returns the new line character. */
    function char newLine() {
      return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
      return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
      return 34;
    }
}
