// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on
 * the screen is indexed (0,0).
 */
class Screen {

    static boolean color;
    static Array toToThe;

    /** Initializes the Screen. */
    function void init() {
      let color = true;
      let toToThe = Array.new(16);
      let toToThe[0] = 1;
      let toToThe[1] = 2;
      let toToThe[2] = 4;
      let toToThe[3] = 8;
      let toToThe[4] = 16;
      let toToThe[5] = 32;
      let toToThe[6] = 64;
      let toToThe[7] = 128;
      let toToThe[8] = 256;
      let toToThe[9] = 512;
      let toToThe[10] = 1024;
      let toToThe[11] = 2048;
      let toToThe[12] = 4096;
      let toToThe[13] = 8192;
      let toToThe[14] = 16384;
      let toToThe[15] = 32767 + 1;
      return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
      do Screen.setColor(false);
      do Screen.drawRectangle(0,0,511,255);
      return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
      let color = b;
      return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
      var int addr, value, mod;

      let addr = (32 * y) + (x / 16);
      let value = Memory.peek(16384 + addr);
      let mod = (x - ((x/16) * 16));
      if(color){
        let value = value | toToThe[mod];
      }
      else{
        let value = value & (~toToThe[mod]);
      }
      do Memory.poke(16384 + addr, value);
      return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
      var int dx, dy, a, b, diff;
      var boolean right, down;
      let a = 0;
      let b = 0;
      let diff = 0;
      if((x2 -x1) > 0){
        let right = true;
      }
      else{
        let right = false;
      }

      if((y2 -y1) > 0){
        let down = true;
      }
      else{
        let down = false;
      }

      let dx = Math.abs(x2 - x1);
      let dy = Math.abs(y2 - y1);

      while( (a < dx) | (b < dy)){
      /*
        do Output.printInt(a);
        do Output.printString(" ");
        do Output.printInt(b);
        do Output.printString(" ");
        do Output.println();
        */

        if(right & down){
          do Screen.drawPixel(x1+a, y1+b);
        }

        if(right & ~down){
          do Screen.drawPixel(x1+a, y1-b);
        }

        if(~right & down){
          do Screen.drawPixel(x1-a, y1+b);
        }

        if(~right & ~down){
          do Screen.drawPixel(x1-a, y1-b);
        }

        if(diff < 0){
          let a = a +1;
          let diff = diff + dy;
        }
        else{
          let b = b +1;
          let diff = diff - dx;
        }
      }
      return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
      var int dy, b;
      var boolean down;
      let b = 0;

      if((x2 -x1) > 0){
        let down = true;
      }
      else{
        let down = false;
      }

      let dy = Math.abs(x2 -x1);

      while(dy > b){
        if(down){
          do Screen.drawLine(x1 + b,y1,x1 + b,y2);
        }
        else{
          do Screen.drawLine(x1 - b,y1,x1 - b,y2);
        }
        let b = b + 1;
      }
      return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
      var int dy, diff;
      let dy = -r;
      while(dy < (r + 1)){
        let diff = Math.sqrt((r * r) - (dy * dy));
        do Screen.drawLine(x - diff, y + dy, x + diff, y + dy);
        let dy = dy + 1;
      }
      return;
    }
}
