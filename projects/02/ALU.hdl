// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs,
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN
        x[16], y[16],  // 16-bit inputs
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    Mux16(a=x,b[0..15]=false,sel=zx, out=zxmux);
    Not16(in=zxmux, out=notx);
    Mux16(a=zxmux, b=notx,sel=nx,out=nxmux);
    Mux16(a=y,b[0..15]=false,sel=zy, out=zymux);
    Not16(in=zymux, out=noty);
    Mux16(a=zymux, b=noty,sel=ny,out=nymux);
    Add16(a=nxmux, b=nymux, out=xyadd);
    And16(a=nxmux, b=nymux, out=xyand);
    Mux16(a=xyand, b=xyadd, sel=f, out=fmux);
    Not16(in=fmux, out=notout);
    Mux16(a=fmux, b=notout, sel=no, out[15]=ng, out=out, out[0..7]=out1, out[8..15]=out2);
    Or8Way(in=out1,out=or1);
    Or8Way(in=out2,out=or2);
    Not(in=or1,out=notor1);
    Not(in=or2,out=notor2);
    And(a=notor1, b=notor2, out=zr);
}
