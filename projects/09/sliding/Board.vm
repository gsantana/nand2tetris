function Board.new 2
push constant 2
call Memory.alloc 1
pop pointer 0
push argument 0
pop this 0
push this 0
push this 0
call Math.multiply 2
pop local 1
push local 1
call Array.new 1
pop this 1
push constant 0
pop local 0
label WHILE_EXP0
push local 0
push local 1
lt
not
if-goto WHILE_END0
push local 0
push this 1
add
push constant 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push pointer 0
return
function Board.dispose 0
push argument 0
pop pointer 0
push this 1
call Array.dispose 1
pop temp 0
push pointer 0
call Memory.deAlloc 1
pop temp 0
push constant 0
return
function Board.moveNeighborToEmptyPos 11
push argument 0
pop pointer 0
push constant 0
pop local 0
label WHILE_EXP0
push local 0
push this 1
add
pop pointer 1
push that 0
push constant 0
eq
not
not
if-goto WHILE_END0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push local 0
push this 0
call Math.divide 2
pop local 1
push local 0
push local 1
push this 0
call Math.multiply 2
sub
pop local 2
push local 1
pop local 4
push local 2
pop local 5
call Direction.up 0
pop local 7
call Direction.down 0
pop local 8
call Direction.left 0
pop local 9
call Direction.right 0
pop local 10
push argument 1
call Direction.getCode 1
push local 7
call Direction.getCode 1
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 4
push this 0
push constant 1
sub
lt
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push local 4
push constant 1
add
pop local 4
label IF_FALSE1
label IF_FALSE0
push argument 1
call Direction.getCode 1
push local 8
call Direction.getCode 1
eq
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push local 4
push constant 0
gt
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push local 4
push constant 1
sub
pop local 4
label IF_FALSE3
label IF_FALSE2
push argument 1
call Direction.getCode 1
push local 9
call Direction.getCode 1
eq
if-goto IF_TRUE4
goto IF_FALSE4
label IF_TRUE4
push local 5
push this 0
push constant 1
sub
lt
if-goto IF_TRUE5
goto IF_FALSE5
label IF_TRUE5
push local 5
push constant 1
add
pop local 5
label IF_FALSE5
label IF_FALSE4
push argument 1
call Direction.getCode 1
push local 10
call Direction.getCode 1
eq
if-goto IF_TRUE6
goto IF_FALSE6
label IF_TRUE6
push local 5
push constant 0
gt
if-goto IF_TRUE7
goto IF_FALSE7
label IF_TRUE7
push local 5
push constant 1
sub
pop local 5
label IF_FALSE7
label IF_FALSE6
push local 4
push this 0
call Math.multiply 2
push local 5
add
pop local 3
push local 3
push local 0
eq
not
if-goto IF_TRUE8
goto IF_FALSE8
label IF_TRUE8
push local 3
push this 1
add
pop pointer 1
push that 0
pop local 6
push local 3
push this 1
add
push local 0
push this 1
add
pop pointer 1
push that 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push this 1
add
push local 6
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
not
return
goto IF_END8
label IF_FALSE8
push constant 0
return
label IF_END8
function Board.isSolved 2
push argument 0
pop pointer 0
push this 0
push this 0
call Math.multiply 2
pop local 1
push constant 0
pop local 0
label WHILE_EXP0
push local 0
push local 1
lt
not
if-goto WHILE_END0
push local 0
push local 0
push this 1
add
pop pointer 1
push that 0
eq
not
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
return
label IF_FALSE0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
not
return
function Board.getSize 0
push argument 0
pop pointer 0
push this 0
return
function Board.setValue 0
push argument 0
pop pointer 0
push argument 2
push this 0
call Math.multiply 2
push argument 3
add
push this 1
add
push argument 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
return
function Board.getValue 0
push argument 0
pop pointer 0
push argument 1
push this 0
call Math.multiply 2
push argument 2
add
push this 1
add
pop pointer 1
push that 0
return
