function Obstacle.new 0
push constant 3
call Memory.alloc 1
pop pointer 0
push argument 0
pop this 0
push argument 1
pop this 1
push argument 2
pop this 2
push pointer 0
call Obstacle.draw 1
pop temp 0
push pointer 0
return
function Obstacle.dispose 0
push argument 0
pop pointer 0
push pointer 0
call Memory.deAlloc 1
pop temp 0
push constant 0
return
function Obstacle.draw 1
push argument 0
pop pointer 0
push this 0
push constant 1
sub
push constant 16
call Math.multiply 2
push constant 32
call Math.multiply 2
push this 1
push constant 15
add
add
pop local 0
push this 2
push constant 3
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push pointer 0
push local 0
push constant 1
push constant 1
push constant 1
push constant 2
neg
call Obstacle.drawObstacle 6
pop temp 0
label IF_FALSE0
push this 2
push constant 0
eq
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push pointer 0
push local 0
push constant 1
neg
push constant 0
push constant 0
push constant 1
call Obstacle.drawObstacle 6
pop temp 0
label IF_FALSE1
push constant 0
return
function Obstacle.drawObstacle 1
push argument 0
pop pointer 0
push constant 16384
push argument 1
add
pop local 0
push local 0
push constant 0
add
push local 0
push constant 0
add
call Memory.peek 1
push argument 5
and
push argument 2
or
call Memory.poke 2
pop temp 0
push local 0
push constant 32
add
push local 0
push constant 32
add
call Memory.peek 1
push argument 5
and
push argument 3
or
call Memory.poke 2
pop temp 0
push local 0
push constant 64
add
push local 0
push constant 64
add
call Memory.peek 1
push argument 5
and
push argument 3
or
call Memory.poke 2
pop temp 0
push local 0
push constant 96
add
push local 0
push constant 96
add
call Memory.peek 1
push argument 5
and
push argument 3
or
call Memory.poke 2
pop temp 0
push local 0
push constant 128
add
push local 0
push constant 128
add
call Memory.peek 1
push argument 5
and
push argument 3
or
call Memory.poke 2
pop temp 0
push local 0
push constant 160
add
push local 0
push constant 160
add
call Memory.peek 1
push argument 5
and
push argument 3
or
call Memory.poke 2
pop temp 0
push local 0
push constant 192
add
push local 0
push constant 192
add
call Memory.peek 1
push argument 5
and
push argument 3
or
call Memory.poke 2
pop temp 0
push local 0
push constant 224
add
push local 0
push constant 224
add
call Memory.peek 1
push argument 5
and
push argument 3
or
call Memory.poke 2
pop temp 0
push local 0
push constant 256
add
push local 0
push constant 256
add
call Memory.peek 1
push argument 5
and
push argument 3
or
call Memory.poke 2
pop temp 0
push local 0
push constant 288
add
push local 0
push constant 288
add
call Memory.peek 1
push argument 5
and
push argument 3
or
call Memory.poke 2
pop temp 0
push local 0
push constant 320
add
push local 0
push constant 320
add
call Memory.peek 1
push argument 5
and
push argument 3
or
call Memory.poke 2
pop temp 0
push local 0
push constant 352
add
push local 0
push constant 352
add
call Memory.peek 1
push argument 5
and
push argument 3
or
call Memory.poke 2
pop temp 0
push local 0
push constant 384
add
push local 0
push constant 384
add
call Memory.peek 1
push argument 5
and
push argument 3
or
call Memory.poke 2
pop temp 0
push local 0
push constant 416
add
push local 0
push constant 416
add
call Memory.peek 1
push argument 5
and
push argument 3
or
call Memory.poke 2
pop temp 0
push local 0
push constant 448
add
push local 0
push constant 448
add
call Memory.peek 1
push argument 5
and
push argument 3
or
call Memory.poke 2
pop temp 0
push local 0
push constant 480
add
push local 0
push constant 480
add
call Memory.peek 1
push argument 5
and
push argument 4
or
call Memory.poke 2
pop temp 0
push constant 0
return
