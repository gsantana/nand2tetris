/**
 * Represents a Ricochet Robot  game.
 */
class RicochetRobotsGame {

  field Array obstacles;
  field Array robots;
  field Target target; //represented by symbol X
  field int targetx; //
  field int targety;
  field int time; //number is increment each iteration to be used in random number generation
  field int moves; //number of movements of all robots

  constructor RicochetRobotsGame new() {
    do generateBoard();
    do Output.moveCursor(1,0);
    do Output.printString("RicoChet Robots");
    do Output.moveCursor(3,0);
    do Output.printString("Press s to start game!");
    do Output.moveCursor(5,0);
    do Output.printString("Press s to skip next level");
    do Output.moveCursor(7,0);
    do Output.printString("Press r to reset current level");
    do Output.moveCursor(9,0);
    do Output.printString("Press arrow key to move robot");
    do Output.moveCursor(11,0);
    do Output.printString("Press 1-5 key to select robot");
    do Output.moveCursor(13,0);
    do Output.printString("Press q quit");
    do Output.moveCursor(15,0);
    do Output.printString("Selected Robot: 1");
    do Output.moveCursor(17,0);
    do Output.printString("Moves: 0");
    do Output.moveCursor(20,0);
    do Output.printString("Goal: Put Robot 1 in the");
    do Output.moveCursor(21,0);
    do Output.printString("target(X) location");
    return this;

  }

  /** draw the board and initialize the game **/
  method void generateBoard(){
    let targetx = 12;
    let targety = 14;
    let moves = 0;
    do Screen.drawLine(256,0,256,255);
    let obstacles = Array.new(50);
    let obstacles[0] = Obstacle.new(1,3,3);
    let obstacles[1] = Obstacle.new(1,13,3);
    let obstacles[2] = Obstacle.new(2,4,0);
    let obstacles[3] = Obstacle.new(2,4,3);
    let obstacles[4] = Obstacle.new(2,11,3);
    let obstacles[5] = Obstacle.new(3,10,0);
    let obstacles[6] = Obstacle.new(4,8,3);
    let obstacles[7] = Obstacle.new(4,12,3);
    let obstacles[8] = Obstacle.new(4,16,0);
    let obstacles[9] = Obstacle.new(5,2,3);
    let obstacles[10] = Obstacle.new(5,7,0);
    let obstacles[11] = Obstacle.new(5,12,0);
    let obstacles[12] = Obstacle.new(6,2,0);
    let obstacles[13] = Obstacle.new(6,15,0);
    let obstacles[14] = Obstacle.new(6,15,3);
    let obstacles[15] = Obstacle.new(7,5,0);
    let obstacles[16] = Obstacle.new(7,6,3);
    let obstacles[17] = Obstacle.new(7,11,0);
    let obstacles[18] = Obstacle.new(7,12,3);
    let obstacles[19] = Obstacle.new(8,1,0);
    let obstacles[20] = Obstacle.new(8,8,0);
    let obstacles[21] = Obstacle.new(8,8,3);
    let obstacles[22] = Obstacle.new(8,9,0);
    let obstacles[23] = Obstacle.new(8,10,3);
    let obstacles[24] = Obstacle.new(8,15,0);
    let obstacles[25] = Obstacle.new(8,15,3);
    let obstacles[26] = Obstacle.new(9,8,3);
    let obstacles[27] = Obstacle.new(9,10,3);
    let obstacles[28] = Obstacle.new(10,8,0);
    let obstacles[29] = Obstacle.new(10,9,0);
    let obstacles[30] = Obstacle.new(11,6,3);
    let obstacles[31] = Obstacle.new(11,12,0);
    let obstacles[32] = Obstacle.new(11,12,3);
    let obstacles[33] = Obstacle.new(12,2,3);
    let obstacles[34] = Obstacle.new(12,2,0);
    let obstacles[35] = Obstacle.new(12,6,0);
    let obstacles[36] = Obstacle.new(12,14,3);
    let obstacles[37] = Obstacle.new(13,7,0);
    let obstacles[38] = Obstacle.new(13,8,3);
    let obstacles[39] = Obstacle.new(13,11,0);
    let obstacles[40] = Obstacle.new(13,12,3);
    let obstacles[41] = Obstacle.new(13,14,0);
    let obstacles[42] = Obstacle.new(13,16,0);
    let obstacles[43] = Obstacle.new(14,14,3);
    let obstacles[44] = Obstacle.new(15,1,0);
    let obstacles[45] = Obstacle.new(15,5,3);
    let obstacles[46] = Obstacle.new(15,13,0);
    let obstacles[47] = Obstacle.new(16,4,0);
    let obstacles[48] = Obstacle.new(16,7,3);
    let obstacles[49] = Obstacle.new(16,11,3);

    let robots = Array.new(5);
    let robots[0] = Robot.new(4,2,1);
    let robots[1] = Robot.new(9,2,2);
    let robots[2] = Robot.new(10,3,3);
    let robots[3] = Robot.new(10,5,4);
    let robots[4] = Robot.new(14,10,5);

    let target = Target.new(targetx,targety);
    return;
  }


  /** Disposes this game. */
  method void dispose() {
    var int cont;
    var Obstacle obstacle;
    var Robot robot;

    let cont = 0;
    while(cont < 50){
      let obstacle = obstacles[cont];
      do obstacle.dispose();
      let cont = cont + 1;
    }

    let cont = 0;
    while(cont < 5){
      let robot = robots[cont];
      do robot.dispose();
      let cont = cont + 1;
    }

    do target.dispose();
    do Memory.deAlloc(this);
    return;
  }

  method void incTimes(){
    if(time > 30000){
      let time = 0;
    }
    else{
      let time = time + 1;
    }
    return;
  }

  /** executes the game **/
  method void run() {
    var char key;  // the key currently pressed by the user
    var boolean exit, robotMoved, hit;
    var int selectedRobot;
    var int cont;
    var Robot robot, nextRobot;
    var Obstacle obstacle;

    let exit = false;
    let selectedRobot = 1;

    while (~exit) {

      while (key = 0) {
        do incTimes();
        let key = Keyboard.keyPressed();
      }

      if (key = 81)  { let exit = true; }  // q key
      if (key = 49)  { let selectedRobot = 1; } // 1 key
      if (key = 50)  { let selectedRobot = 2; } // 2 key
      if (key = 51)  { let selectedRobot = 3; } // 3 key
      if (key = 52)  { let selectedRobot = 4; } // 4 key
      if (key = 53)  { let selectedRobot = 5; } // 5 key
      if (key = 83)  { do nextLevel(); let hit = true; }  // s key
      if (key = 82)  { do resetGame(); } // r key

      // update selected robot number on the screen
      do Output.moveCursor(15,16);
      do Output.printInt(selectedRobot);

      let robot = robots[selectedRobot-1];
      let hit = false;
      let robotMoved = false;

      while(~hit){
        // check if robot hit the wall
        let hit = Obstacle.hitWall(robot, key);

        // check if robot hit an obstacle
        let cont = 0;
        while((cont < 50) & (~hit) ){
          let obstacle = obstacles[cont];
          let hit= obstacle.hit(robot,key);
          let cont = cont + 1;
          do incTimes();
        }

        // check if robot hit other robot
        let cont = 0;
        while((cont < 5) & (~hit) ){
          let nextRobot = robots[cont];
          let hit= nextRobot.hit(robot,key);
          let cont = cont + 1;
        }

        // if robot does not hit an obstable move robot
        if((~hit)){
          let robotMoved = true;
          do robot.move(key);
          if(target.hit(robot)){
            do target.dispose();
            let target = Target.new(targetx,targety);
          }
        }
      } // while(~hit)

      // update the number of movements of all robots on screen
      if(robotMoved){
        let moves  = moves + 1;
        do Output.moveCursor(17,7);
        do Output.printInt(moves);
      }

      // check if robot 1 found the target and if it found jump to the next level
      let robot = robots[0];
      if(target.hit(robot)){
        do nextLevel();
      }

      while (~(key = 0)) {
        let key = Keyboard.keyPressed();
        do incTimes();
      }

    } // while (~exit)
    return;
  }

  /** move the robots to initial position of level **/
  method void resetGame(){
    var int cont, moves;
    var Robot robot;
    let cont = 0;
    while(cont < 5){
      let moves  = 0;
      let robot = robots[cont];
      let cont = cont + 1;
      do robot.erase();
      do robot.reset();
      do robot.draw();
      do target.draw();
      do Output.moveCursor(17,0);
      do Output.printString("Moves: 0    ");
    }
    return;
  }

  /** jump the game to the next level puting the target in another location **/
  method void nextLevel(){
    var int nextTargetPosition, cont;
    var Obstacle obstacle;
    var Robot robot;

    // calculate target next position
    let nextTargetPosition = time -(49 * (time / 49));

    let obstacle = obstacles[nextTargetPosition];
    // add 1 if target position does not change
    if((obstacle.getx() = targetx) & (obstacle.gety() = targety)) {
      let nextTargetPosition = nextTargetPosition - 1;
    }

    // ignore positions in the center of the board
    if(((nextTargetPosition > 19) & (nextTargetPosition < 24)) | (nextTargetPosition = 26)){
      let nextTargetPosition = nextTargetPosition + 10;
    }

    // erase old target and draw new target
    let obstacle = obstacles[nextTargetPosition];
    let targetx = obstacle.getx();
    let targety = obstacle.gety();
    do target.erase();
    do target.dispose();
    let target = Target.new(targetx,targety);

    //draw the robots and set current position as original position.
    //If the game is reseted the robots are moved to this position.
    let cont = 0;
    while(cont < 5){
      let robot = robots[cont];
      do robot.draw();
      do robot.original();
      let cont = cont + 1;
    }

    let moves = 0;
    do Output.moveCursor(17,0);
    do Output.printString("Moves: 0   ");
    return;
  }
}
